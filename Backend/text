import { useEffect, useRef, useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Search, MapPin, Layers, Info, Navigation, ZoomIn, ZoomOut, RotateCcw } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import L from "leaflet";
import "leaflet/dist/leaflet.css";

// Fix for default markers in Leaflet with Vite
delete (L.Icon.Default.prototype as any)._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',
  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
});

const MapView = () => {
  const mapRef = useRef<HTMLDivElement>(null);
  const mapInstance = useRef<L.Map | null>(null);
  const coordinateMarker = useRef<L.Marker | null>(null);
  const stateLabelsLayer = useRef<L.LayerGroup | null>(null);
  const currentTileLayer = useRef<L.TileLayer | null>(null);
  const [searchQuery, setSearchQuery] = useState("");
  const [latitude, setLatitude] = useState("");
  const [longitude, setLongitude] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [showLabels, setShowLabels] = useState(false);
  const [mapStyle, setMapStyle] = useState('streets');
  const { toast } = useToast();

  // India's approximate center coordinates
  const INDIA_CENTER: [number, number] = [20.5937, 78.9629];
  const INDIA_ZOOM = 5;

  // Create custom label marker
  const createLabelMarker = (latlng: [number, number], text: string, className: string = 'state-label') => {
    const labelIcon = L.divIcon({
      html: `<div class="${className}">${text}</div>`,
      className: 'custom-label-marker',
      iconSize: [100, 20],
      iconAnchor: [50, 10],
    });
    return L.marker(latlng, { icon: labelIcon });
  };

  // Load and filter India boundary from countries.geojson
  const loadIndiaBoundary = async (map: L.Map) => {
    try {
      const response = await fetch('/geo/countries.geojson');
      const data = await response.json();
      
      // Find India in the countries data
      const indiaFeature = data.features.find((feature: any) => 
        feature.properties.NAME === 'India' || 
        feature.properties.name === 'India' ||
        feature.properties.ADMIN === 'India'
      );

      if (indiaFeature) {
        L.geoJSON(indiaFeature, {
          style: {
            color: '#3b82f6',
            weight: 4,
            opacity: 1,
            fillOpacity: 0.1,
            dashArray: '10, 5'
          }
        }).addTo(map);

        // Add country label
        if (stateLabelsLayer.current && showLabels) {
          const countryLabel = createLabelMarker(INDIA_CENTER, 'INDIA', 'country-label');
          stateLabelsLayer.current.addLayer(countryLabel);
        }
      }
    } catch (error) {
      console.error('Error loading India boundary:', error);
      // Fallback to simplified boundary
      const indiaBoundary = {
        "type": "Feature",
        "properties": { "name": "India" },
        "geometry": {
          "type": "Polygon",
          "coordinates": [[
            [68.176645, 7.96553], [97.395555, 7.96553],
            [97.395555, 35.49401], [68.176645, 35.49401],
            [68.176645, 7.96553]
          ]]
        }
      };
      
      L.geoJSON(indiaBoundary as any, {
        style: {
          color: '#3b82f6',
          weight: 3,
          opacity: 1,
          fillOpacity: 0.1,
          dashArray: '10, 5'
        }
      }).addTo(map);
    }
  };

  // Load Indian states boundaries with labels
  const loadIndianStates = async (map: L.Map) => {
    try {
      const response = await fetch('/geo/states-provinces.geojson');
      const data = await response.json();
      
      // Filter for Indian states
      const indianStates = data.features.filter((feature: any) => 
        feature.properties.admin === 'India' || 
        feature.properties.ADMIN === 'India' ||
        feature.properties.iso_a2 === 'IN'
      );

      if (indianStates.length > 0) {
        L.geoJSON(indianStates, {
          style: {
            color: '#6366f1',
            weight: 2,
            opacity: 0.8,
            fillOpacity: 0.05,
            fillColor: '#6366f1'
          },
          onEachFeature: (feature, layer) => {
            const stateName = feature.properties.name || feature.properties.NAME || 'Unknown State';
            
            // Enhanced popup styling
            layer.bindPopup(`
              <div class="bg-white p-4 rounded-lg shadow-lg border-0">
                <h3 class="text-xl font-bold text-gray-800 mb-2">${stateName}</h3>
                <div class="text-sm text-gray-600">
                  <p class="mb-1"><span class="font-semibold">Type:</span> State/UT</p>
                  <p class="mb-1"><span class="font-semibold">Country:</span> India</p>
                  <p><span class="font-semibold">Click:</span> View details</p>
                </div>
              </div>
            `, {
              className: 'custom-popup',
              maxWidth: 300
            });

            // Add hover effects
            layer.on({
              mouseover: (e) => {
                const targetLayer = e.target;
                targetLayer.setStyle({
                  weight: 3,
                  color: '#4f46e5',
                  fillOpacity: 0.2
                });
              },
              mouseout: (e) => {
                const targetLayer = e.target;
                targetLayer.setStyle({
                  weight: 2,
                  color: '#6366f1',
                  fillOpacity: 0.05
                });
              }
            });

            // Add state labels
            if (showLabels && stateLabelsLayer.current) {
              try {
                // Cast layer to FeatureGroup to access getBounds method
                const featureLayer = layer as L.FeatureGroup;
                if (featureLayer.getBounds) {
                  const bounds = featureLayer.getBounds();
                  const center = bounds.getCenter();
                  const stateLabel = createLabelMarker([center.lat, center.lng], stateName, 'state-label');
                  stateLabelsLayer.current.addLayer(stateLabel);
                }
              } catch (error) {
                console.error('Error adding state label:', error);
              }
            }
          }
        }).addTo(map);
      }
    } catch (error) {
      console.error('Error loading Indian states:', error);
    }
  };

  const changeMapStyle = (newStyle: string) => {
    if (!mapInstance.current || !currentTileLayer.current) return;

    const mapStyles = {
      streets: {
        url: 'https://api.maptiler.com/maps/streets-v2/{z}/{x}/{y}.png?key=optnG9Th5mJtIwTcUvI3',
        name: 'Streets (White Labels)'
      },
      satellite: {
        url: 'https://api.maptiler.com/maps/hybrid/{z}/{x}/{y}.jpg?key=optnG9Th5mJtIwTcUvI3',
        name: 'Satellite with Labels'
      },
      terrain: {
        url: 'https://api.maptiler.com/maps/landscape/{z}/{x}/{y}.png?key=optnG9Th5mJtIwTcUvI3',
        name: 'Terrain with Labels'
      },
      bright: {
        url: 'https://api.maptiler.com/maps/bright-v2/{z}/{x}/{y}.png?key=optnG9Th5mJtIwTcUvI3',
        name: 'Bright (Dark Labels)'
      }
    };

    // Remove current tile layer
    mapInstance.current.removeLayer(currentTileLayer.current);

    // Add new tile layer
    const newTileLayer = L.tileLayer(mapStyles[newStyle as keyof typeof mapStyles].url, {
      attribution: '&copy; <a href="https://www.maptiler.com/copyright/">MapTiler</a> &copy; <a href="https://www.openstreetmap.org/copyright/">OpenStreetMap</a> contributors',
      maxZoom: 18,
    });

    newTileLayer.addTo(mapInstance.current);
    currentTileLayer.current = newTileLayer;
    setMapStyle(newStyle);

    toast({
      title: `🗺️ Map style changed`,
      description: `Switched to ${mapStyles[newStyle as keyof typeof mapStyles].name}`,
    });
  };

  const resetMapView = () => {
    if (mapInstance.current) {
      mapInstance.current.flyTo(INDIA_CENTER, INDIA_ZOOM, {
        animate: true,
        duration: 2
      });
      toast({
        title: "🔄 Map reset",
        description: "Returned to India overview",
      });
    }
  };

  const toggleLabels = () => {
    setShowLabels(!showLabels);
    if (stateLabelsLayer.current && mapInstance.current) {
      if (showLabels) {
        mapInstance.current.removeLayer(stateLabelsLayer.current);
      } else {
        mapInstance.current.addLayer(stateLabelsLayer.current);
      }
    }
    toast({
      title: showLabels ? "🏷️ Labels hidden" : "🏷️ Labels shown",
      description: `State and region labels are now ${showLabels ? 'hidden' : 'visible'}`,
    });
  };

  useEffect(() => {
    if (!mapRef.current || mapInstance.current) return;

    // Initialize map with India center
    const map = L.map(mapRef.current, {
      zoomControl: false,
      attributionControl: false
    }).setView(INDIA_CENTER, INDIA_ZOOM);

    // Add custom zoom control
    L.control.zoom({
      position: 'topright'
    }).addTo(map);

    // Map style configurations with white/visible labels
    const mapStyles = {
      streets: {
        url: 'https://api.maptiler.com/maps/streets-v2/{z}/{x}/{y}.png?key=optnG9Th5mJtIwTcUvI3',
        name: 'Streets (White Labels)'
      },
      satellite: {
        url: 'https://api.maptiler.com/maps/hybrid/{z}/{x}/{y}.jpg?key=optnG9Th5mJtIwTcUvI3',
        name: 'Satellite with Labels'
      },
      terrain: {
        url: 'https://api.maptiler.com/maps/landscape/{z}/{x}/{y}.png?key=optnG9Th5mJtIwTcUvI3',
        name: 'Terrain with Labels'
      },
      bright: {
        url: 'https://api.maptiler.com/maps/bright-v2/{z}/{x}/{y}.png?key=optnG9Th5mJtIwTcUvI3',
        name: 'Bright (Dark Labels)'
      }
    };

    // Add initial tile layer
    currentTileLayer.current = L.tileLayer(mapStyles[mapStyle as keyof typeof mapStyles].url, {
      attribution: '&copy; <a href="https://www.maptiler.com/copyright/">MapTiler</a> &copy; <a href="https://www.openstreetmap.org/copyright/">OpenStreetMap</a> contributors',
      maxZoom: 18,
    }).addTo(map);

    // Initialize labels layer
    stateLabelsLayer.current = L.layerGroup().addTo(map);

    // Load real India boundaries and states
    loadIndiaBoundary(map);
    loadIndianStates(map);

    // Add some sample data points with enhanced styling
    const sampleDataPoints = [
      { lat: 28.6139, lng: 77.2090, city: "New Delhi", pollution: "High", metal: "Lead", value: 85 },
      { lat: 19.0760, lng: 72.8777, city: "Mumbai", pollution: "Medium", metal: "Arsenic", value: 65 },
      { lat: 13.0827, lng: 80.2707, city: "Chennai", pollution: "Low", metal: "Cadmium", value: 25 },
      { lat: 22.5726, lng: 88.3639, city: "Kolkata", pollution: "High", metal: "Mercury", value: 90 },
      { lat: 12.9716, lng: 77.5946, city: "Bangalore", pollution: "Medium", metal: "Lead", value: 55 },
      { lat: 26.9124, lng: 75.7873, city: "Jaipur", pollution: "Medium", metal: "Arsenic", value: 60 },
      { lat: 21.1702, lng: 72.8311, city: "Surat", pollution: "High", metal: "Lead", value: 80 },
      { lat: 17.3850, lng: 78.4867, city: "Hyderabad", pollution: "Low", metal: "Cadmium", value: 30 }
    ];

    sampleDataPoints.forEach(point => {
      const color = point.pollution === 'High' ? '#ef4444' : 
                   point.pollution === 'Medium' ? '#f59e0b' : '#10b981';
      
      const marker = L.circleMarker([point.lat, point.lng], {
        radius: 10 + (point.value / 10),
        fillColor: color,
        color: '#fff',
        weight: 3,
        opacity: 1,
        fillOpacity: 0.8
      }).addTo(map);

      // Enhanced popup with better styling
      marker.bindPopup(`
        <div class="bg-white p-4 rounded-lg shadow-xl border-0 min-w-[200px]">
          <h3 class="text-xl font-bold text-gray-800 mb-3">${point.city}</h3>
          <div class="space-y-2 text-sm">
            <div class="flex justify-between items-center">
              <span class="font-semibold text-gray-600">Metal Detected:</span>
              <span class="bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-xs font-medium">${point.metal}</span>
            </div>
            <div class="flex justify-between items-center">
              <span class="font-semibold text-gray-600">Pollution Level:</span>
              <span class="px-2 py-1 rounded-full text-xs font-medium ${
                point.pollution === 'High' ? 'bg-red-100 text-red-800' :
                point.pollution === 'Medium' ? 'bg-yellow-100 text-yellow-800' :
                'bg-green-100 text-green-800'
              }">${point.pollution}</span>
            </div>
            <div class="flex justify-between items-center">
              <span class="font-semibold text-gray-600">Pollution Index:</span>
              <span class="font-bold text-gray-800">${point.value}/100</span>
            </div>
          </div>
          <div class="mt-3 pt-2 border-t border-gray-200">
            <div class="w-full bg-gray-200 rounded-full h-2">
              <div class="h-2 rounded-full" style="width: ${point.value}%; background-color: ${color}"></div>
            </div>
          </div>
        </div>
      `, {
        className: 'custom-popup',
        maxWidth: 250
      });

      // Add hover effects to markers
      marker.on('mouseover', function() {
        this.setRadius(15 + (point.value / 8));
      });
      
      marker.on('mouseout', function() {
        this.setRadius(10 + (point.value / 10));
      });
    });

    mapInstance.current = map;

    // Add custom CSS for labels
    const style = document.createElement('style');
    style.textContent = `
      .custom-label-marker {
        background: none !important;
        border: none !important;
      }
      
      .state-label {
        color: white !important;
        font-weight: bold;
        font-size: 12px;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.8);
        background: rgba(0,0,0,0.3);
        padding: 2px 6px;
        border-radius: 4px;
        backdrop-filter: blur(4px);
        border: 1px solid rgba(255,255,255,0.2);
        text-align: center;
        white-space: nowrap;
      }
      
      .country-label {
        color: white !important;
        font-weight: bold;
        font-size: 16px;
        text-shadow: 2px 2px 6px rgba(0,0,0,0.9);
        background: rgba(59, 130, 246, 0.4);
        padding: 4px 8px;
        border-radius: 6px;
        backdrop-filter: blur(6px);
        border: 2px solid rgba(255,255,255,0.3);
        text-align: center;
        letter-spacing: 2px;
      }
      
      .custom-popup .leaflet-popup-content-wrapper {
        border-radius: 12px !important;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04) !important;
      }
      
      .custom-popup .leaflet-popup-tip {
        background: white !important;
      }
    `;
    document.head.appendChild(style);

    return () => {
      if (mapInstance.current) {
        mapInstance.current.remove();
        mapInstance.current = null;
      }
      document.head.removeChild(style);
    };
  }, [showLabels]);

  const handleSearch = async () => {
    if (!searchQuery.trim()) {
      toast({
        title: "Enter search query",
        description: "Please enter a state, city, district, or coordinates to search.",
        variant: "destructive",
      });
      return;
    }

    setIsLoading(true);
    
    try {
      // Search results with enhanced data
      const searchResults: { [key: string]: { coords: [number, number], zoom: number, type: string } } = {
        "delhi": { coords: [28.6139, 77.2090], zoom: 10, type: "City" },
        "mumbai": { coords: [19.0760, 72.8777], zoom: 10, type: "City" },
        "chennai": { coords: [13.0827, 80.2707], zoom: 10, type: "City" },
        "kolkata": { coords: [22.5726, 88.3639], zoom: 10, type: "City" },
        "bangalore": { coords: [12.9716, 77.5946], zoom: 10, type: "City" },
        "rajasthan": { coords: [27.0238, 74.2179], zoom: 7, type: "State" },
        "gujarat": { coords: [23.0225, 72.5714], zoom: 7, type: "State" },
        "maharashtra": { coords: [19.7515, 75.7139], zoom: 7, type: "State" },
        "karnataka": { coords: [15.3173, 75.7139], zoom: 7, type: "State" },
        "tamil nadu": { coords: [11.1271, 78.6569], zoom: 7, type: "State" },
        "west bengal": { coords: [22.9868, 87.8550], zoom: 7, type: "State" },
        "uttar pradesh": { coords: [26.8467, 80.9462], zoom: 7, type: "State" },
      };

      const query = searchQuery.toLowerCase();
      const result = searchResults[query];

      if (result && mapInstance.current) {
        mapInstance.current.flyTo(result.coords, result.zoom, {
          animate: true,
          duration: 2
        });
        
        // Add a temporary search marker with enhanced styling
        const searchMarker = L.marker(result.coords, {
          icon: L.divIcon({
            html: `
              <div class="search-marker">
                <div class="search-marker-inner">
                  <div class="search-marker-pulse"></div>
                  📍
                </div>
              </div>
            `,
            className: 'custom-search-marker',
            iconSize: [40, 40],
            iconAnchor: [20, 20]
          })
        }).addTo(mapInstance.current);

        searchMarker.bindPopup(`
          <div class="bg-gradient-to-r from-blue-500 to-purple-600 text-white p-4 rounded-lg shadow-xl">
            <h3 class="text-xl font-bold mb-2">📍 ${searchQuery.toUpperCase()}</h3>
            <p class="text-sm opacity-90">Type: ${result.type}</p>
            <p class="text-xs mt-2 opacity-75">Search Result Location</p>
          </div>
        `).openPopup();

        // Add custom CSS for search marker
        if (!document.querySelector('#search-marker-styles')) {
          const searchStyle = document.createElement('style');
          searchStyle.id = 'search-marker-styles';
          searchStyle.textContent = `
            .custom-search-marker {
              background: none !important;
              border: none !important;
            }
            
            .search-marker {
              position: relative;
              width: 40px;
              height: 40px;
            }
            
            .search-marker-inner {
              position: absolute;
              top: 50%;
              left: 50%;
              transform: translate(-50%, -50%);
              font-size: 24px;
              z-index: 2;
            }
            
            .search-marker-pulse {
              position: absolute;
              top: 50%;
              left: 50%;
              transform: translate(-50%, -50%);
              width: 40px;
              height: 40px;
              background: rgba(59, 130, 246, 0.4);
              border-radius: 50%;
              animation: pulse 2s infinite;
            }
            
            @keyframes pulse {
              0% {
                transform: translate(-50%, -50%) scale(0.8);
                opacity: 1;
              }
              100% {
                transform: translate(-50%, -50%) scale(2);
                opacity: 0;
              }
            }
          `;
          document.head.appendChild(searchStyle);
        }

        // Remove search marker after 5 seconds
        setTimeout(() => {
          if (mapInstance.current) {
            mapInstance.current.removeLayer(searchMarker);
          }
        }, 5000);

        toast({
          title: "🎯 Location found",
          description: `Zoomed to ${searchQuery} (${result.type})`,
        });
      } else {
        toast({
          title: "❌ Location not found",
          description: "Please try searching for a major Indian city or state.",
          variant: "destructive",
        });
      }
    } catch (error) {
      toast({
        title: "🚫 Search failed",
        description: "There was an error searching for the location.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleCoordinateSubmit = () => {
    const lat = parseFloat(latitude);
    const lng = parseFloat(longitude);

    if (isNaN(lat) || isNaN(lng)) {
      toast({
        title: "Invalid coordinates",
        description: "Please enter valid latitude and longitude values.",
        variant: "destructive",
      });
      return;
    }

    if (lat < -90 || lat > 90) {
      toast({
        title: "Invalid latitude",
        description: "Latitude must be between -90 and 90 degrees.",
        variant: "destructive",
      });
      return;
    }

    if (lng < -180 || lng > 180) {
      toast({
        title: "Invalid longitude", 
        description: "Longitude must be between -180 and 180 degrees.",
        variant: "destructive",
      });
      return;
    }

    if (!mapInstance.current) return;

    // Remove existing coordinate marker if any
    if (coordinateMarker.current) {
      mapInstance.current.removeLayer(coordinateMarker.current);
    }

    // Smooth fly to coordinates
    mapInstance.current.flyTo([lat, lng], 12, {
      animate: true,
      duration: 2
    });

    // Add enhanced marker at the coordinates
    coordinateMarker.current = L.marker([lat, lng], {
      icon: L.icon({
        iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',
        iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',
        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
        iconSize: [30, 49],
        iconAnchor: [15, 49],
        popupAnchor: [1, -40],
        shadowSize: [49, 49]
      })
    }).addTo(mapInstance.current);

    coordinateMarker.current.bindPopup(`
      <div class="bg-gradient-to-r from-green-500 to-blue-600 text-white p-4 rounded-lg shadow-xl">
        <h3 class="text-xl font-bold mb-3">🎯 Custom Location</h3>
        <div class="space-y-2 text-sm">
          <p><span class="font-semibold">📍 Latitude:</span> ${lat.toFixed(6)}</p>
          <p><span class="font-semibold">🌍 Longitude:</span> ${lng.toFixed(6)}</p>
          <p class="text-xs mt-2 opacity-75">Manually entered coordinates</p>
        </div>
      </div>
    `).openPopup();

    toast({
      title: "📍 Location found",
      description: `Moved to coordinates: ${lat.toFixed(4)}, ${lng.toFixed(4)}`,
    });
  };

  const getUserLocation = () => {
    if (navigator.geolocation) {
      toast({
        title: "🔍 Getting location...",
        description: "Please allow location access for best results.",
      });

      navigator.geolocation.getCurrentPosition(
        (position) => {
          const lat = position.coords.latitude;
          const lng = position.coords.longitude;
          
          setLatitude(lat.toString());
          setLongitude(lng.toString());
          
          if (mapInstance.current) {
            mapInstance.current.flyTo([lat, lng], 14, {
              animate: true,
              duration: 2
            });

            // Remove existing coordinate marker if any
            if (coordinateMarker.current) {
              mapInstance.current.removeLayer(coordinateMarker.current);
            }

            // Add enhanced user location marker
            coordinateMarker.current = L.marker([lat, lng], {
              icon: L.divIcon({
                html: `
                  <div class="user-location-marker">
                    <div class="user-location-pulse"></div>
                    <div class="user-location-dot">📍</div>
                  </div>
                `,
                className: 'custom-user-marker',
                iconSize: [50, 50],
                iconAnchor: [25, 25]
              })
            }).addTo(mapInstance.current);

            coordinateMarker.current.bindPopup(`
              <div class="bg-gradient-to-r from-purple-500 to-pink-600 text-white p-4 rounded-lg shadow-xl">
                <h3 class="text-xl font-bold mb-3">📱 Your Location</h3>
                <div class="space-y-2 text-sm">
                  <p><span class="font-semibold">📍 Latitude:</span> ${lat.toFixed(6)}</p>
                  <p><span class="font-semibold">🌍 Longitude:</span> ${lng.toFixed(6)}</p>
                  <p><span class="font-semibold">🎯 Accuracy:</span> ±${Math.round(position.coords.accuracy)}m</p>
                  <p class="text-xs mt-2 opacity-75">Auto-detected location</p>
                </div>
              </div>
            `).openPopup();

            // Add user location marker styles
            if (!document.querySelector('#user-location-styles')) {
              const userLocationStyle = document.createElement('style');
              userLocationStyle.id = 'user-location-styles';
              userLocationStyle.textContent = `
                .custom-user-marker {
                  background: none !important;
                  border: none !important;
                }
                
                .user-location-marker {
                  position: relative;
                  width: 50px;
                  height: 50px;
                }
                
                .user-location-dot {
                  position: absolute;
                  top: 50%;
                  left: 50%;
                  transform: translate(-50%, -50%);
                  font-size: 20px;
                  z-index: 2;
                }
                
                .user-location-pulse {
                  position: absolute;
                  top: 50%;
                  left: 50%;
                  transform: translate(-50%, -50%);
                  width: 20px;
                  height: 20px;
                  background: rgba(168, 85, 247, 0.6);
                  border-radius: 50%;
                  animation: userPulse 2s infinite;
                }
                
                @keyframes userPulse {
                  0% {
                    transform: translate(-50%, -50%) scale(1);
                    opacity: 1;
                  }
                  100% {
                    transform: translate(-50%, -50%) scale(3);
                    opacity: 0;
                  }
                }
              `;
              document.head.appendChild(userLocationStyle);
            }

            toast({
              title: "📍 Location found",
              description: "Centered on your current location",
            });
          }
        },
        (error) => {
          toast({
            title: "🚫 Location access denied",
            description: "Unable to get your current location. Please enter coordinates manually.",
            variant: "destructive",
          });
        }
      );
    } else {
      toast({
        title: "❌ Geolocation not supported",
        description: "Your browser doesn't support geolocation. Please enter coordinates manually.",
        variant: "destructive",
      });
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100">
      <div className="container mx-auto px-4 pt-24 pb-16">
        <div className="mb-8 text-center">
          <h1 className="text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-4">
            🗺️ Interactive Map View
          </h1>
          <p className="text-muted-foreground text-lg max-w-2xl mx-auto">
            Visualize groundwater quality data across India with interactive mapping, boundary highlighting, and enhanced labeling
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          {/* Map Controls */}
          <div className="lg:col-span-1 space-y-6">
            <Card className="shadow-lg border-0 bg-white/80 backdrop-blur-sm">
              <CardHeader className="bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-t-lg">
                <CardTitle className="flex items-center gap-2">
                  <Search className="w-5 h-5" />
                  Search Location
                </CardTitle>
                <CardDescription className="text-blue-100">
                  Search for states, cities, or districts to zoom to specific areas
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4 p-6">
                <div>
                  <Label htmlFor="search" className="text-sm font-medium">Location</Label>
                  <Input
                    id="search"
                    placeholder="e.g., Delhi, Mumbai, Rajasthan..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    onKeyDown={(e) => e.key === 'Enter' && handleSearch()}
                    className="mt-1 transition-all duration-200 focus:ring-2 focus:ring-blue-500"
                  />
                </div>
                <Button 
                  onClick={handleSearch} 
                  disabled={isLoading} 
                  className="w-full bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 transition-all duration-200 transform hover:scale-105"
                >
                  {isLoading ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                      Searching...
                    </>
                  ) : (
                    <>
                      <Search className="w-4 h-4 mr-2" />
                      Search & Zoom
                    </>
                  )}
                </Button>
              </CardContent>
            </Card>

            <Card className="shadow-lg border-0 bg-white/80 backdrop-blur-sm">
              <CardHeader className="bg-gradient-to-r from-green-500 to-teal-600 text-white rounded-t-lg">
                <CardTitle className="flex items-center gap-2">
                  <Navigation className="w-5 h-5" />
                  Go to Coordinates
                </CardTitle>
                <CardDescription className="text-green-100">
                  Enter latitude and longitude to navigate to a specific location
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4 p-6">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="latitude" className="text-sm font-medium">Latitude</Label>
                    <Input
                      id="latitude"
                      type="number"
                      step="any"
                      placeholder="e.g., 28.6139"
                      value={latitude}
                      onChange={(e) => setLatitude(e.target.value)}
                      className="mt-1 transition-all duration-200 focus:ring-2 focus:ring-green-500"
                    />
                  </div>
                  <div>
                    <Label htmlFor="longitude" className="text-sm font-medium">Longitude</Label>
                    <Input
                      id="longitude"
                      type="number"
                      step="any"
                      placeholder="e.g., 77.2090"
                      value={longitude}
                      onChange={(e) => setLongitude(e.target.value)}
                      className="mt-1 transition-all duration-200 focus:ring-2 focus:ring-green-500"
                    />
                  </div>
                </div>
                <div className="space-y-2">
                  <Button 
                    onClick={handleCoordinateSubmit} 
                    className="w-full bg-gradient-to-r from-green-500 to-teal-600 hover:from-green-600 hover:to-teal-700 transition-all duration-200 transform hover:scale-105"
                    disabled={!latitude || !longitude}
                  >
                    <MapPin className="w-4 h-4 mr-2" />
                    Go to Location
                  </Button>
                  <Button 
                    onClick={getUserLocation} 
                    variant="outline"
                    className="w-full border-2 border-green-500 text-green-600 hover:bg-green-50 transition-all duration-200 transform hover:scale-105"
                  >
                    <Navigation className="w-4 h-4 mr-2" />
                    Use My Location
                  </Button>
                </div>
              </CardContent>
            </Card>

            <Card className="shadow-lg border-0 bg-white/80 backdrop-blur-sm">
              <CardHeader className="bg-gradient-to-r from-purple-500 to-pink-600 text-white rounded-t-lg">
                <CardTitle className="flex items-center gap-2">
                  <Layers className="w-5 h-5" />
                  Map Controls
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3 p-6">
                <div>
                  <Label htmlFor="mapStyle" className="text-sm font-medium mb-2 block">Map Style</Label>
                  <select
                    id="mapStyle"
                    value={mapStyle}
                    onChange={(e) => changeMapStyle(e.target.value)}
                    className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-200"
                  >
                    <option value="streets">🗺️ Streets (White Labels)</option>
                    <option value="satellite">🛰️ Satellite with Labels</option>
                    <option value="terrain">🏔️ Terrain with Labels</option>
                    <option value="bright">☀️ Bright (Dark Labels)</option>
                  </select>
                </div>
                <Button 
                  onClick={resetMapView}
                  variant="outline"
                  className="w-full border-2 border-blue-500 text-blue-600 hover:bg-blue-50 transition-all duration-200 transform hover:scale-105"
                >
                  <RotateCcw className="w-4 h-4 mr-2" />
                  Reset to India View
                </Button>
                <Button 
                  onClick={toggleLabels}
                  variant="outline"
                  className={`w-full border-2 transition-all duration-200 transform hover:scale-105 ${
                    showLabels 
                      ? 'border-orange-500 text-orange-600 hover:bg-orange-50' 
                      : 'border-gray-500 text-gray-600 hover:bg-gray-50'
                  }`}
                >
                  <Layers className="w-4 h-4 mr-2" />
                  {showLabels ? 'Hide Custom Labels' : 'Show Custom Labels'}
                </Button>
              </CardContent>
            </Card>

            <Card className="shadow-lg border-0 bg-white/80 backdrop-blur-sm">
              <CardHeader className="bg-gradient-to-r from-indigo-500 to-blue-600 text-white rounded-t-lg">
                <CardTitle className="flex items-center gap-2">
                  <Layers className="w-5 h-5" />
                  Map Legend
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3 p-6">
                <div className="space-y-3">
                  <h4 className="font-semibold text-gray-700 mb-2">Pollution Levels</h4>
                  <div className="flex items-center gap-3">
                    <div className="w-4 h-4 bg-red-500 rounded-full shadow-sm"></div>
                    <span className="text-sm font-medium">High Pollution (70-100)</span>
                  </div>
                  <div className="flex items-center gap-3">
                    <div className="w-4 h-4 bg-amber-500 rounded-full shadow-sm"></div>
                    <span className="text-sm font-medium">Medium Pollution (40-70)</span>
                  </div>
                  <div className="flex items-center gap-3">
                    <div className="w-4 h-4 bg-green-500 rounded-full shadow-sm"></div>
                    <span className="text-sm font-medium">Low Pollution (0-40)</span>
                  </div>
                </div>
                <div className="space-y-3">
                  <h4 className="font-semibold text-gray-700 mb-2">Map Styles Available</h4>
                  <div className="flex items-center gap-3">
                    <div className="w-4 h-4 bg-blue-500 rounded shadow-sm"></div>
                    <span className="text-sm">🗺️ Streets (White Labels)</span>
                  </div>
                  <div className="flex items-center gap-3">
                    <div className="w-4 h-4 bg-green-600 rounded shadow-sm"></div>
                    <span className="text-sm">🛰️ Satellite with Labels</span>
                  </div>
                  <div className="flex items-center gap-3">
                    <div className="w-4 h-4 bg-amber-600 rounded shadow-sm"></div>
                    <span className="text-sm">🏔️ Terrain with Labels</span>
                  </div>
                  <div className="flex items-center gap-3">
                    <div className="w-4 h-4 bg-yellow-400 rounded shadow-sm"></div>
                    <span className="text-sm">☀️ Bright (Dark Labels)</span>
                  </div>
                </div>
                <hr className="my-3 border-gray-200" />
                <div className="space-y-3">
                  <h4 className="font-semibold text-gray-700 mb-2">Map Features</h4>
                  <div className="flex items-center gap-3">
                    <div className="w-4 h-1 bg-blue-500 rounded shadow-sm"></div>
                    <span className="text-sm">Country Boundary</span>
                  </div>
                  <div className="flex items-center gap-3">
                    <div className="w-4 h-1 bg-indigo-500 rounded shadow-sm"></div>
                    <span className="text-sm">State Boundaries</span>
                  </div>
                  <div className="flex items-center gap-3">
                    <div className="w-4 h-4 bg-white border-2 border-gray-400 rounded shadow-sm flex items-center justify-center text-xs">📍</div>
                    <span className="text-sm">Location Labels</span>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="shadow-lg border-0 bg-white/80 backdrop-blur-sm">
              <CardHeader className="bg-gradient-to-r from-teal-500 to-cyan-600 text-white rounded-t-lg">
                <CardTitle className="flex items-center gap-2">
                  <Info className="w-5 h-5" />
                  Map Information
                </CardTitle>
              </CardHeader>
              <CardContent className="p-6">
                <ul className="text-sm space-y-2 text-gray-600">
                  <li className="flex items-start gap-2">
                    <span className="text-blue-500 font-bold">•</span>
                    <span>Click on markers to view detailed pollution data</span>
                  </li>
                  <li className="flex items-start gap-2">
                    <span className="text-green-500 font-bold">•</span>
                    <span>Use mouse wheel to zoom in/out</span>
                  </li>
                  <li className="flex items-start gap-2">
                    <span className="text-purple-500 font-bold">•</span>
                    <span>Drag to pan across the map</span>
                  </li>
                  <li className="flex items-start gap-2">
                    <span className="text-orange-500 font-bold">•</span>
                    <span>Hover over states for quick info</span>
                  </li>
                  <li className="flex items-start gap-2">
                    <span className="text-red-500 font-bold">•</span>
                    <span>Switch map styles for better label visibility</span>
                  </li>
                </ul>
              </CardContent>
            </Card>
          </div>

          {/* Map Container */}
          <div className="lg:col-span-3">
            <Card className="h-[700px] shadow-2xl border-0 bg-white/90 backdrop-blur-sm overflow-hidden">
              <CardContent className="p-0 h-full relative">
                <div ref={mapRef} className="h-full w-full" />
                
                {/* Floating Map Info */}
                <div className="absolute top-4 left-4 bg-white/90 backdrop-blur-md rounded-lg p-3 shadow-lg border border-white/20 z-[1000]">
                  <div className="text-xs text-gray-600 space-y-1">
                    <div className="font-semibold text-gray-800">🗺️ Interactive Map</div>
                    <div>📍 India Groundwater Quality</div>
                    <div>🏷️ Labels: {showLabels ? 'Visible' : 'Hidden'}</div>
                  </div>
                </div>

                {/* Loading Overlay */}
                {isLoading && (
                  <div className="absolute inset-0 bg-black/20 backdrop-blur-sm flex items-center justify-center z-[2000]">
                    <div className="bg-white rounded-lg p-6 shadow-xl flex items-center gap-3">
                      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
                      <span className="text-gray-700 font-medium">Loading map data...</span>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </div>

        {/* Additional Info Cards */}
        <div className="mt-8 grid grid-cols-1 md:grid-cols-3 gap-6">
          <Card className="shadow-lg border-0 bg-gradient-to-br from-blue-500 to-purple-600 text-white">
            <CardContent className="p-6 text-center">
              <div className="text-3xl mb-2">🌊</div>
              <h3 className="text-xl font-bold mb-2">Water Quality Data</h3>
              <p className="text-blue-100">Real-time monitoring of groundwater quality across India</p>
            </CardContent>
          </Card>
          
          <Card className="shadow-lg border-0 bg-gradient-to-br from-green-500 to-teal-600 text-white">
            <CardContent className="p-6 text-center">
              <div className="text-3xl mb-2">🔬</div>
              <h3 className="text-xl font-bold mb-2">Metal Detection</h3>
              <p className="text-green-100">Advanced analysis of heavy metals in water sources</p>
            </CardContent>
          </Card>
          
          <Card className="shadow-lg border-0 bg-gradient-to-br from-orange-500 to-red-600 text-white">
            <CardContent className="p-6 text-center">
              <div className="text-3xl mb-2">📊</div>
              <h3 className="text-xl font-bold mb-2">Pollution Index</h3>
              <p className="text-orange-100">Comprehensive pollution scoring and visualization</p>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default MapView;